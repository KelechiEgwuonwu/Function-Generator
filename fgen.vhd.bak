library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

  entity fgen is 
  port(input: in std_logic_vector(7 downto 0);
          OE,CLK,M1,M2: in std_logic;
       q: out std_logic_vector(7 downto 0));
		   
		 end fgen;
		 architecture arc of fgen is
    type state_type is (s0,s30);
    signal state: state_type;
    signal count: unsigned (5 downto 0);
 
 begin
    process (clk)
    begin 
        if rising_edge(clk) then
            if oe = '1' and m1 = '0' and m2 = '0' then
                q <= input;
					 elsif oe = '1' and m1 = '1' and m2 ='0' then
					 case state is 
					 when s0=> q<="11111111";
					 IF count= 19 then
					 state <= s30;
					 count<=(others=>'0');
					 ELSE count<=count+1;
					 END if;
					 when s30=> q<="00000000";
					 IF count= 19 then
					 state <= s0;
					 count<=(others=>'0');
					 ELSE count<=count+1;
					 END IF;
                    when others =>
                        state <= s0;
                        
								end case;
								end if;
								end if;
								end process;

             
end architecture arc;






					 
					 
					 
					 
					 
					 
					 
					 
 